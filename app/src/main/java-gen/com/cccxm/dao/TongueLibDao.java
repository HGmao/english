package com.cccxm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TONGUE_LIB".
*/
public class TongueLibDao extends AbstractDao<TongueLib, Long> {

    public static final String TABLENAME = "TONGUE_LIB";

    /**
     * Properties of entity TongueLib.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lib_name = new Property(1, String.class, "lib_name", false, "LIB_NAME");
        public final static Property Level = new Property(2, Integer.class, "level", false, "LEVEL");
        public final static Property Score = new Property(3, Integer.class, "score", false, "SCORE");
        public final static Property Uri = new Property(4, String.class, "uri", false, "URI");
        public final static Property Count = new Property(5, Integer.class, "count", false, "COUNT");
        public final static Property Submit = new Property(6, Boolean.class, "submit", false, "SUBMIT");
    }


    public TongueLibDao(DaoConfig config) {
        super(config);
    }
    
    public TongueLibDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TONGUE_LIB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LIB_NAME\" TEXT NOT NULL ," + // 1: lib_name
                "\"LEVEL\" INTEGER," + // 2: level
                "\"SCORE\" INTEGER," + // 3: score
                "\"URI\" TEXT," + // 4: uri
                "\"COUNT\" INTEGER," + // 5: count
                "\"SUBMIT\" INTEGER);"); // 6: submit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TONGUE_LIB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TongueLib entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLib_name());
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(3, level);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(4, score);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(5, uri);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(6, count);
        }
 
        Boolean submit = entity.getSubmit();
        if (submit != null) {
            stmt.bindLong(7, submit ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TongueLib entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLib_name());
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(3, level);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(4, score);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(5, uri);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(6, count);
        }
 
        Boolean submit = entity.getSubmit();
        if (submit != null) {
            stmt.bindLong(7, submit ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TongueLib readEntity(Cursor cursor, int offset) {
        TongueLib entity = new TongueLib( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // lib_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // level
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // score
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uri
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // count
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // submit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TongueLib entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLib_name(cursor.getString(offset + 1));
        entity.setLevel(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setScore(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUri(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSubmit(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TongueLib entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TongueLib entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TongueLib entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
